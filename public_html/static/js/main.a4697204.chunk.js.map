{"version":3,"sources":["App/upload.jsx","App/check.jsx","App.js","serviceWorker.js","index.js"],"names":["Upload","props","useState","rowsPerPage","setRowsPerPage","page","setPage","rows","setRows","penulis","checksum","document","setDocument","handleChange","e","name","file","target","files","reader","FileReader","onload","ev","data","result","sha256","readAsBinaryString","value","useEffect","a","axios","get","response","initialEffect","length","sendHandler","post","status","Box","Table","size","TableHead","style","backgroundColor","indigo","TableRow","TableCell","Typography","color","TableBody","map","row","index","Transactions","Penulis","Checksum","height","colSpan","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","event","parseInt","display","justifyContent","Paper","padding","flexDirection","width","maxWidth","TextField","id","label","onChange","margin","Input","placeholder","type","inputProps","Button","onClick","Check","handleKirim","params","headers","code","headCells","judul","App","userMode","setUserMode","primary","AppBar","position","Toolbar","fontSize","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4697204.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box,\n  Table,\n  TableHead,\n  TableCell,\n  TableRow,\n  Typography,\n  TablePagination,\n  TableBody,\n  Paper,\n  TextField,\n  Input,\n  Button,\n} from '@material-ui/core';\nimport { indigo } from '@material-ui/core/colors'\nimport { sha256 } from 'js-sha256';\nimport axios from 'axios';\n\nconst Upload = props => {\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [page, setPage] = useState(0);\n  const [rows, setRows] = useState([]);\n  const [document, setDocument] = useState({\n    penulis: '',\n    checksum: '',\n  })\n  const handleChangePage = (e, newPage) => {\n    setPage(newPage);\n  }\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const handleChange = (e, name) => {\n    if (name === 'document') {\n      const file = e.target.files[0]\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (ev) => {\n          var data = ev.target.result;\n          setDocument({...document, checksum: sha256(data) })\n        }\n        reader.readAsBinaryString(file);\n      }\n    } else {\n      setDocument({...document, [name]: e.target.value})\n    }\n  }\n  useEffect(() => {\n    const initialEffect = async () => {\n      const response = await axios.get('/bc');\n      setRows(response.data);\n    }\n    initialEffect();\n  }, [rows.length])\n  const sendHandler = async () => {\n    const response = await axios.post('/bc', {\n      \"penulis\": document.penulis,\n      \"checksum\": document.checksum\n    })\n    if (response.status === 201) {\n      setRows([]);\n    }\n  }\n\n  return (\n    <Box>\n      <Table\n        size={'small'}\n      >\n        <TableHead\n          style={{\n            backgroundColor: indigo[300],\n          }}\n        >\n          <TableRow>\n            <TableCell>\n              <Typography\n                style={{\n                  color: 'white'\n                }}\n              >\n                Penulis\n            </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography\n                style={{\n                  color: 'white'\n                }}\n              >\n                Checksum\n            </Typography>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row, index) => {\n            return (\n              <TableRow>\n                <TableCell>\n                  <Typography>\n                    {row.Transactions.Penulis}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography>\n                    {row.Transactions.Checksum}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            )\n          })}\n          {rows.length < 5 && (\n            <TableRow style={{ height: (37 * (5-rows.length))}}>\n              <TableCell colSpan={3} />\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <TablePagination\n        rowsPerPageOptions={[5]}\n        component=\"div\"\n        count={props.data.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n      <Box\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <Paper style={{\n          padding: 20,\n          display: 'flex',\n          flexDirection: 'column',\n          width: '50%',\n          maxWidth: '300px',\n        }}>\n          <TextField\n            id=\"standard-name\"\n            label=\"Penulis\"\n            value={document.penulis}\n            onChange={event => handleChange(event, 'penulis')}\n            margin=\"normal\"\n            style={{ margin: 0 }}\n          />\n          <Input\n            placeholder=\"Placeholder\"\n            type=\"file\"\n            inputProps={{\n              'aria-label': 'description',\n            }}\n            style={{margin: \"15px 0\"}}\n            onChange={event => handleChange(event, 'document')}\n          />\n          <Box\n            style={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <Button\n              style={{\n                backgroundColor: indigo[500],\n                color: 'white',\n              }}\n              onClick={sendHandler}\n            >\n              Send\n            </Button>\n          </Box>\n        </Paper>\n      </Box>\n  </Box>\n  )\n};\n\nUpload.propTypes = {\n\n}\n\nexport default Upload;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Paper,\n  Input,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  Typography,\n  TableBody,\n} from '@material-ui/core';\nimport { indigo } from '@material-ui/core/colors';\nimport { sha256 } from 'js-sha256';\nimport axios from 'axios';\n\nconst Check = props => {\n  const [document, setDocument] = useState({\n    penulis: '',\n    checksum: '',\n  })\n  const handleChange = (e) => {\n    const file = e.target.files[0]\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (ev) => {\n        var data = ev.target.result;\n        setDocument({...document, penulis: '', checksum: sha256(data)})\n      }\n      reader.readAsBinaryString(file);\n    }\n  }\n  const handleKirim = async () => {\n    const response = await axios.get('/check',{\n      params: {checksum: document.checksum},\n      headers: {'Content-Type': 'application/json'}\n    });\n    if (response.data.code === 200){\n      setDocument({...document, penulis: response.data.data})\n    }\n  }\n\n  return (\n    <Box>\n      <Table\n        size={'small'}\n      >\n        <TableHead\n          style={{\n            backgroundColor: indigo[300],\n          }}\n        >\n          <TableRow>\n            <TableCell>\n              <Typography\n                style={{\n                  color: 'white'\n                }}\n              >\n                Penulis\n            </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography\n                style={{\n                  color: 'white'\n                }}\n              >\n                Checksum\n            </Typography>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell>\n              <Typography>\n                {document.penulis}\n            </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography>\n                {document.checksum}\n            </Typography>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <Box\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <Paper style={{\n          padding: 20,\n          display: 'flex',\n          flexDirection: 'column',\n          width: '50%',\n          maxWidth: '300px',\n        }}>\n          <Input\n            placeholder=\"Placeholder\"\n            type=\"file\"\n            inputProps={{\n              'aria-label': 'description',\n            }}\n            style={{ margin: \"15px 0\" }}\n            onChange={handleChange}\n          />\n          <Box\n            style={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <Button\n              style={{\n                backgroundColor: indigo[500],\n                color: 'white',\n              }}\n              onClick={handleKirim}\n            >\n              Check\n            </Button>\n          </Box>\n        </Paper>\n      </Box>\n    </Box>\n  )\n}\n\nCheck.propTypes = {\n\n}\n\nexport default Check\n","import React, { useState } from 'react';\nimport {\n  Box,\n  AppBar,\n  Toolbar,\n  Button,\n  Typography,\n} from '@material-ui/core';\nimport { indigo } from '@material-ui/core/colors';\nimport Upload from './App/upload';\nimport Check from './App/check';\n\nfunction App() {\n  const [userMode, setUserMode] = useState(0);\n\n  const primary = indigo;\n\n  return (\n    <Box>\n        <AppBar style={{\n          backgroundColor: primary[500],\n          position: 'static'\n        }}>\n          <Toolbar style={{\n            display: 'flex',\n            justifyContent: 'space-between'\n          }}>\n            <Typography style={{\n              fontSize: 24\n            }}>\n              Document Validator\n            </Typography>\n            <Box>\n              <Button style={{\n                margin: 5,\n                marginLeft: '5px',\n                backgroundColor: !userMode ? primary[300] : '',\n                color: 'white'\n              }} onClick={() => setUserMode(0)}>\n                Upload\n              </Button>\n              <Button style={{\n                margin: 5,\n                marginLeft: '5px',\n                backgroundColor: userMode ? primary[300] : '',\n                color: 'white'\n              }} onClick={() => setUserMode(1)}>\n                Check\n              </Button>\n            </Box>\n          </Toolbar>\n        </AppBar>\n        {\n          userMode === 0 ? <Upload data={headCells}/> : <Check />\n        }\n    </Box>\n  );\n}\n\nconst headCells = [\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n  { penulis: 'Hafidzil Khairi', judul: 'Berani Berkorban', checksum: 'lsdljf34hjflkj32jj43' },\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}